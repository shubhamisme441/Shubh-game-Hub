import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { setupAuth, isAuthenticated } from "./replitAuth";
import { setupWebSocket } from "./websocket";
import { insertGroupSchema, insertGameSchema, insertChatMessageSchema, insertGameParticipantSchema } from "@shared/schema";
import { z } from "zod";

export async function registerRoutes(app: Express): Promise<Server> {
  // Auth middleware
  await setupAuth(app);

  // Auth routes
  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const user = await storage.getUser(userId);
      res.json(user);
    } catch (error) {
      console.error("Error fetching user:", error);
      res.status(500).json({ message: "Failed to fetch user" });
    }
  });

  // Group routes
  app.post('/api/groups', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const groupData = insertGroupSchema.parse({
        ...req.body,
        createdBy: userId,
        inviteCode: Math.random().toString(36).substring(2, 15),
      });
      
      const group = await storage.createGroup(groupData);
      res.json(group);
    } catch (error) {
      console.error("Error creating group:", error);
      res.status(500).json({ message: "Failed to create group" });
    }
  });

  app.get('/api/groups', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const groups = await storage.getUserGroups(userId);
      res.json(groups);
    } catch (error) {
      console.error("Error fetching groups:", error);
      res.status(500).json({ message: "Failed to fetch groups" });
    }
  });

  app.get('/api/groups/:id', isAuthenticated, async (req: any, res) => {
    try {
      const groupId = parseInt(req.params.id);
      const group = await storage.getGroup(groupId);
      
      if (!group) {
        return res.status(404).json({ message: "Group not found" });
      }
      
      res.json(group);
    } catch (error) {
      console.error("Error fetching group:", error);
      res.status(500).json({ message: "Failed to fetch group" });
    }
  });

  app.post('/api/groups/join/:inviteCode', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const { inviteCode } = req.params;
      
      const group = await storage.getGroupByInviteCode(inviteCode);
      if (!group) {
        return res.status(404).json({ message: "Invalid invite code" });
      }
      
      const members = await storage.getGroupMembers(group.id);
      if (members.length >= 3) {
        return res.status(400).json({ message: "Group is full" });
      }
      
      if (members.some(member => member.userId === userId)) {
        return res.status(400).json({ message: "Already a member of this group" });
      }
      
      await storage.joinGroup(group.id, userId);
      res.json({ message: "Successfully joined group", group });
    } catch (error) {
      console.error("Error joining group:", error);
      res.status(500).json({ message: "Failed to join group" });
    }
  });

  app.delete('/api/groups/:id/leave', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const groupId = parseInt(req.params.id);
      
      await storage.leaveGroup(groupId, userId);
      res.json({ message: "Successfully left group" });
    } catch (error) {
      console.error("Error leaving group:", error);
      res.status(500).json({ message: "Failed to leave group" });
    }
  });

  app.get('/api/groups/:id/members', isAuthenticated, async (req: any, res) => {
    try {
      const groupId = parseInt(req.params.id);
      const members = await storage.getGroupMembers(groupId);
      res.json(members);
    } catch (error) {
      console.error("Error fetching group members:", error);
      res.status(500).json({ message: "Failed to fetch group members" });
    }
  });

  app.get('/api/groups/:id/leaderboard', isAuthenticated, async (req: any, res) => {
    try {
      const groupId = parseInt(req.params.id);
      const leaderboard = await storage.getGroupLeaderboard(groupId);
      res.json(leaderboard);
    } catch (error) {
      console.error("Error fetching leaderboard:", error);
      res.status(500).json({ message: "Failed to fetch leaderboard" });
    }
  });

  // Game routes
  app.post('/api/games', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const gameData = insertGameSchema.parse({
        ...req.body,
        currentTurn: userId,
        status: 'waiting',
      });
      
      // Check if group already has an active game
      const activeGame = await storage.getActiveGroupGame(gameData.groupId);
      if (activeGame) {
        return res.status(400).json({ message: "Group already has an active game" });
      }
      
      const game = await storage.createGame(gameData);
      
      // Add creator as participant
      await storage.addGameParticipant({
        gameId: game.id,
        userId,
        playerSymbol: getFirstPlayerSymbol(gameData.gameType),
        isSpectator: false,
      });
      
      res.json(game);
    } catch (error) {
      console.error("Error creating game:", error);
      res.status(500).json({ message: "Failed to create game" });
    }
  });

  app.get('/api/games/:id', isAuthenticated, async (req: any, res) => {
    try {
      const gameId = parseInt(req.params.id);
      const game = await storage.getGame(gameId);
      
      if (!game) {
        return res.status(404).json({ message: "Game not found" });
      }
      
      const participants = await storage.getGameParticipants(gameId);
      res.json({ ...game, participants });
    } catch (error) {
      console.error("Error fetching game:", error);
      res.status(500).json({ message: "Failed to fetch game" });
    }
  });

  app.post('/api/games/:id/join', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const gameId = parseInt(req.params.id);
      
      const game = await storage.getGame(gameId);
      if (!game) {
        return res.status(404).json({ message: "Game not found" });
      }
      
      const participants = await storage.getGameParticipants(gameId);
      const maxPlayers = getMaxPlayers(game.gameType);
      
      if (participants.filter(p => !p.isSpectator).length >= maxPlayers) {
        // Add as spectator
        await storage.addGameParticipant({
          gameId,
          userId,
          isSpectator: true,
        });
      } else {
        // Add as player
        const playerSymbol = getNextPlayerSymbol(game.gameType, participants);
        await storage.addGameParticipant({
          gameId,
          userId,
          playerSymbol,
          isSpectator: false,
        });
        
        // Start game if enough players
        if (participants.filter(p => !p.isSpectator).length + 1 >= getMinPlayers(game.gameType)) {
          await storage.updateGame(gameId, { status: 'active' });
        }
      }
      
      res.json({ message: "Successfully joined game" });
    } catch (error) {
      console.error("Error joining game:", error);
      res.status(500).json({ message: "Failed to join game" });
    }
  });

  app.post('/api/games/:id/move', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const gameId = parseInt(req.params.id);
      const { move } = req.body;
      
      const game = await storage.getGame(gameId);
      if (!game) {
        return res.status(404).json({ message: "Game not found" });
      }
      
      if (game.status !== 'active') {
        return res.status(400).json({ message: "Game is not active" });
      }
      
      if (game.currentTurn !== userId) {
        return res.status(400).json({ message: "Not your turn" });
      }
      
      const participants = await storage.getGameParticipants(gameId);
      const gameResult = processGameMove(game, participants, userId, move);
      
      await storage.updateGame(gameId, {
        gameState: gameResult.gameState,
        currentTurn: gameResult.nextTurn,
        status: gameResult.status,
        winnerId: gameResult.winnerId,
      });
      
      // Update player stats if game completed
      if (gameResult.status === 'completed') {
        for (const participant of participants) {
          if (!participant.isSpectator) {
            const isWin = participant.userId === gameResult.winnerId;
            const isDraw = !gameResult.winnerId;
            await storage.updatePlayerStats(
              participant.userId,
              game.groupId,
              game.gameType,
              isWin,
              isDraw
            );
          }
        }
      }
      
      res.json(gameResult);
    } catch (error) {
      console.error("Error making move:", error);
      res.status(500).json({ message: "Failed to make move" });
    }
  });

  app.get('/api/groups/:id/active-game', isAuthenticated, async (req: any, res) => {
    try {
      const groupId = parseInt(req.params.id);
      const game = await storage.getActiveGroupGame(groupId);
      
      if (!game) {
        return res.json(null);
      }
      
      const participants = await storage.getGameParticipants(game.id);
      res.json({ ...game, participants });
    } catch (error) {
      console.error("Error fetching active game:", error);
      res.status(500).json({ message: "Failed to fetch active game" });
    }
  });

  // Chat routes
  app.get('/api/groups/:id/messages', isAuthenticated, async (req: any, res) => {
    try {
      const groupId = parseInt(req.params.id);
      const messages = await storage.getChatMessages(groupId);
      res.json(messages);
    } catch (error) {
      console.error("Error fetching messages:", error);
      res.status(500).json({ message: "Failed to fetch messages" });
    }
  });

  app.post('/api/groups/:id/messages', isAuthenticated, async (req: any, res) => {
    try {
      const userId = req.user.claims.sub;
      const groupId = parseInt(req.params.id);
      const messageData = insertChatMessageSchema.parse({
        ...req.body,
        groupId,
        userId,
      });
      
      const message = await storage.sendChatMessage(messageData);
      res.json(message);
    } catch (error) {
      console.error("Error sending message:", error);
      res.status(500).json({ message: "Failed to send message" });
    }
  });

  const httpServer = createServer(app);
  setupWebSocket(httpServer);
  
  return httpServer;
}

// Helper functions
function getFirstPlayerSymbol(gameType: string): string {
  switch (gameType) {
    case 'tic-tac-toe':
      return 'X';
    case 'chess':
      return 'white';
    case 'rock-paper-scissors':
    case 'coin-toss':
    case 'word-battle':
    case 'typing-challenge':
      return 'player1';
    default:
      return 'player1';
  }
}

function getNextPlayerSymbol(gameType: string, participants: any[]): string {
  const playerCount = participants.filter(p => !p.isSpectator).length;
  
  switch (gameType) {
    case 'tic-tac-toe':
      return playerCount === 1 ? 'O' : '△';
    case 'chess':
      return playerCount === 1 ? 'black' : 'spectator';
    case 'rock-paper-scissors':
    case 'coin-toss':
    case 'word-battle':
    case 'typing-challenge':
      return `player${playerCount + 1}`;
    default:
      return `player${playerCount + 1}`;
  }
}

function getMaxPlayers(gameType: string): number {
  switch (gameType) {
    case 'chess':
      return 2;
    case 'tic-tac-toe':
    case 'rock-paper-scissors':
    case 'coin-toss':
    case 'word-battle':
    case 'typing-challenge':
      return 3;
    default:
      return 3;
  }
}

function getMinPlayers(gameType: string): number {
  switch (gameType) {
    case 'chess':
      return 2;
    case 'tic-tac-toe':
    case 'rock-paper-scissors':
    case 'coin-toss':
    case 'word-battle':
    case 'typing-challenge':
      return 2; // Allow 2 players to start, 3rd can join as spectator
    default:
      return 2;
  }
}

function processGameMove(game: any, participants: any[], userId: string, move: any): any {
  // This would contain the actual game logic for each game type
  // For now, returning a basic structure
  const gameLogic = require(`../client/src/lib/games/${game.gameType}`);
  return gameLogic.processMove(game.gameState, participants, userId, move);
}
